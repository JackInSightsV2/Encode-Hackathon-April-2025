import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';
import { Program, Provider, web3 } from '@project-serum/anchor';
import { IDL } from './idl'; // The IDL of your contract (generated by Anchor)
import { Buffer } from 'buffer';

const { SystemProgram } = web3;

// Define the program ID from the contract
const programId = new PublicKey("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkgGSzDkFjM9J");

async function setupProvider() {
  // Connect to Solana Devnet or Mainnet
  const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

  // Load your wallet (use Keypair or a wallet provider like Phantom)
  const wallet = Keypair.generate(); // Or load from a private key file

  const provider = new Provider(connection, wallet, {
    commitment: 'confirmed',
    preflightCommitment: 'processed',
  });

  return provider;
}

async function registerAPI(apiId: string) {
  const provider = await setupProvider();
  const program = new Program(IDL, programId, provider);

  const apiAccount = Keypair.generate(); // Generate an API account for storing data

  // Call the register_api function in the contract
  await program.rpc.registerApi(apiId, {
    accounts: {
      api: apiAccount.publicKey,
      owner: provider.wallet.publicKey,
    },
    signers: [apiAccount],
  });

  console.log(`API registered with ID: ${apiId}, API Account: ${apiAccount.publicKey.toString()}`);
}

async function requestAccess(apiPublicKey: PublicKey) {
  const provider = await setupProvider();
  const program = new Program(IDL, programId, provider);

  const apiKeyAccount = Keypair.generate();

  // Call the request_access function in the contract
  await program.rpc.requestAccess({
    accounts: {
      api: apiPublicKey,
      apiKey: apiKeyAccount.publicKey,
      caller: provider.wallet.publicKey,
    },
    signers: [apiKeyAccount],
  });

  console.log(`Access requested for API: ${apiPublicKey.toString()}`);
}

async function useApiKey(apiKeyAccount: PublicKey) {
  const provider = await setupProvider();
  const program = new Program(IDL, programId, provider);

  // Call the use_api_key function in the contract
  await program.rpc.useApiKey({
    accounts: {
      apiKey: apiKeyAccount,
      caller: provider.wallet.publicKey,
    },
  });

  console.log(`API key used: ${apiKeyAccount.toString()}`);
}

async function verifyApiKey(apiKeyAccount: PublicKey) {
  const provider = await setupProvider();
  const program = new Program(IDL, programId, provider);

  // Call the verify_api_key function in the contract
  const isValid = await program.rpc.verifyApiKey({
    accounts: {
      apiKey: apiKeyAccount,
    },
  });

  console.log(`API key valid: ${isValid}`);
}

async function chargeUser(apiOwner: PublicKey, amount: number) {
  const provider = await setupProvider();
  const program = new Program(IDL, programId, provider);

  // Call the charge_user function in the contract
  await program.rpc.chargeUser(new web3.BN(amount), {
    accounts: {
      caller: provider.wallet.publicKey,
      apiOwner,
    },
  });

  console.log(`User charged ${amount} lamports`);
}

(async () => {
  // Example usage
  const apiId = 'my-api-123';
  await registerAPI(apiId); // Register an API

  // Assume you have an API public key from a previous registration
  const apiPublicKey = new PublicKey('YOUR_API_PUBLIC_KEY');
  await requestAccess(apiPublicKey); // Request access to the API

  const apiKeyAccount = new PublicKey('YOUR_API_KEY_ACCOUNT_PUBLIC_KEY');
  await useApiKey(apiKeyAccount); // Use the API key

  const valid = await verifyApiKey(apiKeyAccount); // Verify the API key
  console.log(`API Key valid: ${valid}`);

  const apiOwner = new PublicKey('YOUR_API_OWNER_PUBLIC_KEY');
  const amount = 1000000; // Amount in lamports (1 SOL = 1 billion lamports)
  await chargeUser(apiOwner, amount); // Charge the user
})();
